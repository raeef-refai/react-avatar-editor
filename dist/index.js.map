{"version":3,"file":"index.js","sources":["../src/utils/parse-dom.js","../src/utils/retrieve-image-url.js","../src/index.js"],"sourcesContent":["/* global DOMParser:false */\n\n/*\n * This method uses DOMParser to parse an HTML string into\n * a document.  By using this approach we avoid the potential\n * for XSS attacks on consumers of this component, which would\n * be created by parsing the string via a detached DOM fragment,\n * as in this latter case script in onload attributes will be\n * run in the context of the host page.\n *\n * The drawback to this approach is that browser support is not\n * as wide - IE10 and up along with evergreen browsers.\n */\nconst parseDOM = (str) => {\n  const parser = typeof DOMParser === 'undefined' ? null : new DOMParser()\n\n  if (!parser) {\n    return null\n  }\n\n  return parser.parseFromString(str, 'text/html')\n}\n\nexport default parseDOM\n","import parseDOM from './parse-dom'\n\n/*\n * Retrieves image URL from collection of data transfer\n * items, if one is present.  As the item will contain\n * an HTML string containing an img element, it's\n * necessary to parse the HTML and then pull the src\n * attribute off the image.\n */\nconst retrieveImageURL = (dataTransferItems, callback) => {\n  for (let i = 0; i < dataTransferItems.length; i++) {\n    let item = dataTransferItems[i]\n\n    if (item.type === 'text/html') {\n      item.getAsString(value => {\n        const doc = parseDOM(value)\n        const img = doc.querySelector('img')\n        if (img && img.src) {\n          callback(img.src)\n        }\n      })\n      break\n    }\n  }\n}\n\nexport default retrieveImageURL\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport retrieveImageUrl from './utils/retrieve-image-url'\n\nconst isTouchDevice = !!(\n  typeof window !== 'undefined' &&\n  typeof navigator !== 'undefined' &&\n  ('ontouchstart' in window || navigator.msMaxTouchPoints > 0)\n)\n\nconst isFileAPISupported = typeof File !== 'undefined'\n\nconst draggableEvents = {\n  touch: {\n    react: {\n      down: 'onTouchStart',\n      mouseDown: 'onMouseDown',\n      drag: 'onTouchMove',\n      drop: 'onTouchEnd',\n      move: 'onTouchMove',\n      mouseMove: 'onMouseMove',\n      up: 'onTouchEnd',\n      mouseUp: 'onMouseUp'\n    },\n    native: {\n      down: 'touchstart',\n      mouseDown: 'mousedown',\n      drag: 'touchmove',\n      drop: 'touchend',\n      move: 'touchmove',\n      mouseMove: 'mousemove',\n      up: 'touchend',\n      mouseUp: 'mouseup'\n    }\n  },\n  desktop: {\n    react: {\n      down: 'onMouseDown',\n      drag: 'onDragOver',\n      drop: 'onDrop',\n      move: 'onMouseMove',\n      up: 'onMouseUp'\n    },\n    native: {\n      down: 'mousedown',\n      drag: 'dragStart',\n      drop: 'drop',\n      move: 'mousemove',\n      up: 'mouseup'\n    }\n  }\n}\nconst deviceEvents = isTouchDevice\n  ? draggableEvents.touch\n  : draggableEvents.desktop\n\nconst pixelRatio =\n  typeof window !== 'undefined' && window.devicePixelRatio\n    ? window.devicePixelRatio\n    : 1\n\n// Draws a rounded rectangle on a 2D context.\nconst drawRoundedRect = (context, x, y, width, height, borderRadius) => {\n  if (borderRadius === 0) {\n    context.rect(x, y, width, height)\n  } else {\n    const widthMinusRad = width - borderRadius\n    const heightMinusRad = height - borderRadius\n    context.translate(x, y)\n    context.arc(\n      borderRadius,\n      borderRadius,\n      borderRadius,\n      Math.PI,\n      Math.PI * 1.5\n    )\n    context.lineTo(widthMinusRad, 0)\n    context.arc(\n      widthMinusRad,\n      borderRadius,\n      borderRadius,\n      Math.PI * 1.5,\n      Math.PI * 2\n    )\n    context.lineTo(width, heightMinusRad)\n    context.arc(\n      widthMinusRad,\n      heightMinusRad,\n      borderRadius,\n      Math.PI * 2,\n      Math.PI * 0.5\n    )\n    context.lineTo(borderRadius, height)\n    context.arc(\n      borderRadius,\n      heightMinusRad,\n      borderRadius,\n      Math.PI * 0.5,\n      Math.PI\n    )\n    context.translate(-x, -y)\n  }\n}\n\nconst drawDiamond = (context, x, y, width, height) => {\n  context.translate(x, y)\n  context.lineTo(width / 2, 0)\n  context.lineTo(width, height / 2)\n  context.lineTo(width / 2, height)\n  context.lineTo(0, height / 2)\n  context.lineTo(width / 2, 0)\n  context.translate(-x, -y)\n}\n\nclass AvatarEditor extends React.Component {\n  static propTypes = {\n    scale: PropTypes.number,\n    rotate: PropTypes.number,\n    image: PropTypes.oneOfType([\n      PropTypes.string,\n      ...(isFileAPISupported ? [PropTypes.instanceOf(File)] : [])\n    ]),\n    border: PropTypes.oneOfType([\n      PropTypes.number,\n      PropTypes.arrayOf(PropTypes.number)\n    ]),\n    width: PropTypes.number,\n    height: PropTypes.number,\n    position: PropTypes.shape({\n      x: PropTypes.number,\n      y: PropTypes.number\n    }),\n    color: PropTypes.arrayOf(PropTypes.number),\n    style: PropTypes.object,\n    crossOrigin: PropTypes.oneOf(['', 'anonymous', 'use-credentials']),\n\n    onDropFile: PropTypes.func,\n    onLoadFailure: PropTypes.func,\n    onLoadSuccess: PropTypes.func,\n    onImageReady: PropTypes.func,\n    onImageChange: PropTypes.func,\n    onMouseUp: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onPositionChange: PropTypes.func,\n\n    disableDrop: PropTypes.bool\n  }\n\n  static defaultProps = {\n    disableDrop: false,\n    scale: 1,\n    rotate: 0,\n    border: 25,\n    width: 200,\n    height: 200,\n    color: [0, 0, 0, 0.5],\n    style: {},\n    onDropFile () { },\n    onLoadFailure () { },\n    onLoadSuccess () { },\n    onImageReady () { },\n    onImageChange () { },\n    onMouseUp () { },\n    onMouseMove () { },\n    onPositionChange () { }\n  }\n\n  state = {\n    drag: false,\n    my: null,\n    mx: null,\n    image: {\n      x: 0.5,\n      y: 0.5\n    }\n  }\n\n  isVertical () {\n    return this.props.rotate % 180 !== 0\n  }\n\n  getBorders (border = this.props.border) {\n    return Array.isArray(border) ? border : [border, border]\n  }\n\n  getDimensions () {\n    const { width, height, rotate, border } = this.props\n\n    const canvas = {}\n\n    const [borderX, borderY] = this.getBorders(border)\n\n    const canvasWidth = width\n    const canvasHeight = height\n\n    if (this.isVertical()) {\n      canvas.width = canvasHeight\n      canvas.height = canvasWidth\n    } else {\n      canvas.width = canvasWidth\n      canvas.height = canvasHeight\n    }\n\n    canvas.width += borderX * 2\n    canvas.height += borderY * 2\n\n    return {\n      canvas,\n      rotate,\n      width,\n      height,\n      border\n    }\n  }\n\n  getImage () {\n    // get relative coordinates (0 to 1)\n    const cropRect = this.getCroppingRect()\n    const image = this.state.image\n\n    // get actual pixel coordinates\n    cropRect.x *= image.resource.width\n    cropRect.y *= image.resource.height\n    cropRect.width *= image.resource.width\n    cropRect.height *= image.resource.height\n\n    // create a canvas with the correct dimensions\n    const canvas = document.createElement('canvas')\n\n    if (this.isVertical()) {\n      canvas.width = cropRect.height\n      canvas.height = cropRect.width\n    } else {\n      canvas.width = cropRect.width\n      canvas.height = cropRect.height\n    }\n\n    // draw the full-size image at the correct position,\n    // the image gets truncated to the size of the canvas.\n    const context = canvas.getContext('2d')\n\n    context.translate(canvas.width / 2, canvas.height / 2)\n    context.rotate(this.props.rotate * Math.PI / 180)\n    context.translate(-(canvas.width / 2), -(canvas.height / 2))\n\n    if (this.isVertical()) {\n      context.translate(\n        (canvas.width - canvas.height) / 2,\n        (canvas.height - canvas.width) / 2\n      )\n    }\n\n    context.drawImage(image.resource, -cropRect.x, -cropRect.y)\n\n    return canvas\n  }\n\n  /**\n   * Get the image scaled to original canvas size.\n   * This was default in 4.x and is now kept as a legacy method.\n   */\n  getImageScaledToCanvas () {\n    const { width, height } = this.getDimensions()\n\n    const canvas = document.createElement('canvas')\n\n    if (this.isVertical()) {\n      canvas.width = height\n      canvas.height = width\n    } else {\n      canvas.width = width\n      canvas.height = height\n    }\n\n    // don't paint a border here, as it is the resulting image\n    this.paintImage(canvas.getContext('2d'), this.state.image, 0, 1)\n\n    return canvas\n  }\n\n  getXScale () {\n    const canvasAspect = this.props.width / this.props.height\n    const imageAspect = this.state.image.width / this.state.image.height\n\n    return Math.min(1, canvasAspect / imageAspect)\n  }\n\n  getYScale () {\n    const canvasAspect = this.props.height / this.props.width\n    const imageAspect = this.state.image.height / this.state.image.width\n\n    return Math.min(1, canvasAspect / imageAspect)\n  }\n\n  getCroppingRect () {\n    const position = this.props.position || {\n      x: this.state.image.x,\n      y: this.state.image.y\n    }\n    const width = 1 / this.props.scale * this.getXScale()\n    const height = 1 / this.props.scale * this.getYScale()\n\n    const croppingRect = {\n      x: position.x - width / 2,\n      y: position.y - height / 2,\n      width,\n      height\n    }\n\n    let xMin = 0\n    let xMax = 1 - croppingRect.width\n    let yMin = 0\n    let yMax = 1 - croppingRect.height\n\n    // If the cropping rect is larger than the image, then we need to change\n    // our maxima & minima for x & y to allow the image to appear anywhere up\n    // to the very edge of the cropping rect.\n    const isLargerThanImage = width > 1 || height > 1\n\n    if (isLargerThanImage) {\n      xMin = -croppingRect.width\n      xMax = 1\n      yMin = -croppingRect.height\n      yMax = 1\n    }\n\n    return {\n      ...croppingRect,\n      x: Math.max(xMin, Math.min(croppingRect.x, xMax)),\n      y: Math.max(yMin, Math.min(croppingRect.y, yMax))\n    }\n  }\n\n  isDataURL (str) {\n    if (str === null) {\n      return false\n    }\n    const regex = /^\\s*data:([a-z]+\\/[a-z]+(;[a-z-]+=[a-z-]+)?)?(;base64)?,[a-z0-9!$&',()*+;=\\-._~:@/?%\\s]*\\s*$/i\n    return !!str.match(regex)\n  }\n\n  loadImage (image) {\n    if (isFileAPISupported && image instanceof File) {\n      this.loadImageFile(image)\n    } else if (typeof image === 'string') {\n      this.loadImageURL(image)\n    }\n  }\n\n  loadImageURL (imageURL) {\n    const imageObj = new Image()\n    imageObj.onload = this.handleImageReady.bind(this, imageObj)\n    imageObj.onerror = this.props.onLoadFailure\n    if (!this.isDataURL(imageURL) && this.props.crossOrigin) { imageObj.crossOrigin = this.props.crossOrigin }\n    imageObj.src = imageURL\n  }\n\n  loadImageFile (imageFile) {\n    const reader = new FileReader()\n    reader.onload = e => this.loadImageURL(e.target.result)\n    reader.readAsDataURL(imageFile)\n  }\n\n  componentDidMount () {\n    const context = ReactDOM.findDOMNode(this.canvas).getContext('2d')\n    if (this.props.image) {\n      this.loadImage(this.props.image)\n    }\n    this.paint(context)\n    if (document) {\n      const nativeEvents = deviceEvents.native\n      document.addEventListener(nativeEvents.move, this.handleMouseMove, false)\n      document.addEventListener(nativeEvents.up, this.handleMouseUp, false)\n      if (isTouchDevice) {\n        document.addEventListener(\n          nativeEvents.mouseMove,\n          this.handleMouseMove,\n          false\n        )\n        document.addEventListener(\n          nativeEvents.mouseUp,\n          this.handleMouseUp,\n          false\n        )\n      }\n    }\n  }\n\n  componentWillUnmount () {\n    if (document) {\n      const nativeEvents = deviceEvents.native\n      document.removeEventListener(\n        nativeEvents.move,\n        this.handleMouseMove,\n        false\n      )\n      document.removeEventListener(nativeEvents.up, this.handleMouseUp, false)\n      if (isTouchDevice) {\n        document.removeEventListener(\n          nativeEvents.mouseMove,\n          this.handleMouseMove,\n          false\n        )\n        document.removeEventListener(\n          nativeEvents.mouseUp,\n          this.handleMouseUp,\n          false\n        )\n      }\n    }\n  }\n\n  componentDidUpdate (prevProps, prevState) {\n    const canvas = ReactDOM.findDOMNode(this.canvas)\n    const context = canvas.getContext('2d')\n    context.clearRect(0, 0, canvas.width, canvas.height)\n    this.paint(context)\n    this.paintImage(context, this.state.image, this.props.border)\n\n    if (\n      prevProps.image !== this.props.image ||\n      prevProps.width !== this.props.width ||\n      prevProps.height !== this.props.height ||\n      prevProps.position !== this.props.position ||\n      prevProps.scale !== this.props.scale ||\n      prevProps.rotate !== this.props.rotate ||\n      prevState.my !== this.state.my ||\n      prevState.mx !== this.state.mx ||\n      prevState.image.x !== this.state.image.x ||\n      prevState.image.y !== this.state.image.y\n    ) {\n      this.props.onImageChange()\n    }\n  }\n\n  handleImageReady (image) {\n    const imageState = this.getInitialSize(image.width, image.height)\n    imageState.resource = image\n    imageState.x = 0.5\n    imageState.y = 0.5\n    this.setState({ drag: false, image: imageState }, this.props.onImageReady)\n    this.props.onLoadSuccess(imageState)\n  }\n\n  getInitialSize (width, height) {\n    let newHeight\n    let newWidth\n\n    const dimensions = this.getDimensions()\n    const canvasRatio = dimensions.height / dimensions.width\n    const imageRatio = height / width\n\n    if (canvasRatio > imageRatio) {\n      newHeight = this.getDimensions().height\n      newWidth = width * (newHeight / height)\n    } else {\n      newWidth = this.getDimensions().width\n      newHeight = height * (newWidth / width)\n    }\n\n    return {\n      height: newHeight,\n      width: newWidth\n    }\n  }\n\n  componentWillReceiveProps (newProps) {\n    if (\n      (newProps.image && this.props.image !== newProps.image) ||\n      this.props.width !== newProps.width ||\n      this.props.height !== newProps.height\n    ) {\n      this.loadImage(newProps.image)\n    }\n  }\n\n  paintImage (context, image, border, scaleFactor = pixelRatio) {\n    if (image.resource) {\n      const position = this.calculatePosition(image, border)\n\n      context.save()\n\n      context.translate(context.canvas.width / 2, context.canvas.height / 2)\n      context.rotate(this.props.rotate * Math.PI / 180)\n      context.translate(\n        -(context.canvas.width / 2),\n        -(context.canvas.height / 2)\n      )\n\n      if (this.isVertical()) {\n        context.translate(\n          (context.canvas.width - context.canvas.height) / 2,\n          (context.canvas.height - context.canvas.width) / 2\n        )\n      }\n\n      context.scale(scaleFactor, scaleFactor)\n\n      context.globalCompositeOperation = 'destination-over'\n      context.drawImage(\n        image.resource,\n        position.x,\n        position.y,\n        position.width,\n        position.height\n      )\n\n      context.restore()\n    }\n  }\n\n  calculatePosition (image, border) {\n    image = image || this.state.image\n\n    const [borderX, borderY] = this.getBorders(border)\n\n    const croppingRect = this.getCroppingRect()\n\n    const width = image.width * this.props.scale\n    const height = image.height * this.props.scale\n\n    let x = -croppingRect.x * width\n    let y = -croppingRect.y * height\n\n    if (this.isVertical()) {\n      x += borderY\n      y += borderX\n    } else {\n      x += borderX\n      y += borderY\n    }\n\n    return {\n      x,\n      y,\n      height,\n      width\n    }\n  }\n\n  paint (context) {\n    context.save()\n    context.scale(pixelRatio, pixelRatio)\n    context.translate(0, 0)\n    context.fillStyle = 'rgba(' + this.props.color.slice(0, 4).join(',') + ')'\n\n    let borderRadius = this.props.borderRadius\n    const dimensions = this.getDimensions()\n    const [borderSizeX, borderSizeY] = this.getBorders(dimensions.border)\n    const height = dimensions.canvas.height\n    const width = dimensions.canvas.width\n\n    context.beginPath()\n    // inner rect, possibly rounded\n    if (borderRadius === 'diamond') {\n      drawDiamond(\n        context,\n        borderSizeX,\n        borderSizeY,\n        width - borderSizeX * 2,\n        height - borderSizeY * 2\n      )\n    } else {\n      borderRadius = Math.max(borderRadius, 0)\n      borderRadius = Math.min(\n        borderRadius,\n        width / 2 - borderSizeX,\n        height / 2 - borderSizeY\n      )\n\n      drawRoundedRect(\n        context,\n        borderSizeX,\n        borderSizeY,\n        width - borderSizeX * 2,\n        height - borderSizeY * 2,\n        borderRadius\n      )\n    }\n    context.rect(width, 0, -width, height) // outer rect, drawn \"counterclockwise\"\n    context.fill('evenodd')\n\n    context.restore()\n  }\n\n  handleMouseDown = (e) => {\n    e = e || window.event\n    // if e is a touch event, preventDefault keeps\n    // corresponding mouse events from also being fired\n    // later.\n    e.preventDefault()\n    this.setState({\n      drag: true,\n      mx: null,\n      my: null\n    })\n  }\n  handleMouseUp = () => {\n    if (this.state.drag) {\n      this.setState({ drag: false })\n      this.props.onMouseUp()\n    }\n  }\n\n  handleMouseMove = (e) => {\n    e = e || window.event\n    if (this.state.drag === false) {\n      return\n    }\n\n    const mousePositionX = e.targetTouches\n      ? e.targetTouches[0].pageX\n      : e.clientX\n    const mousePositionY = e.targetTouches\n      ? e.targetTouches[0].pageY\n      : e.clientY\n\n    const newState = {\n      mx: mousePositionX,\n      my: mousePositionY\n    }\n\n    let rotate = this.props.rotate\n\n    rotate %= 360\n    rotate = rotate < 0 ? rotate + 360 : rotate\n\n    if (this.state.mx && this.state.my) {\n      const mx = this.state.mx - mousePositionX\n      const my = this.state.my - mousePositionY\n\n      const width = this.state.image.width * this.props.scale\n      const height = this.state.image.height * this.props.scale\n\n      let { x: lastX, y: lastY } = this.getCroppingRect()\n\n      lastX *= width\n      lastY *= height\n\n      // helpers to calculate vectors\n      const toRadians = degree => degree * (Math.PI / 180)\n      const cos = Math.cos(toRadians(rotate))\n      const sin = Math.sin(toRadians(rotate))\n\n      const x = lastX + mx * cos + my * sin\n      const y = lastY + -mx * sin + my * cos\n\n      const relativeWidth = 1 / this.props.scale * this.getXScale()\n      const relativeHeight = 1 / this.props.scale * this.getYScale()\n\n      const position = {\n        x: x / width + relativeWidth / 2,\n        y: y / height + relativeHeight / 2\n      }\n\n      this.props.onPositionChange(position)\n\n      newState.image = {\n        ...this.state.image,\n        ...position\n      }\n    }\n\n    this.setState(newState)\n\n    this.props.onMouseMove(e)\n  }\n\n  handleDragOver = (e) => {\n    e = e || window.event\n    e.preventDefault()\n  }\n\n  handleDrop = (e = window.event) => {\n    e.stopPropagation()\n    e.preventDefault()\n\n    if (e.dataTransfer) {\n      const { files, items } = e.dataTransfer\n\n      if (files && files.length) {\n        this.props.onDropFile(e)\n        this.loadImageFile(files[0])\n      } else if (items && items.length) {\n        retrieveImageUrl(items, src => this.loadImage(src))\n      }\n    }\n  }\n\n  setCanvas = (canvas) => {\n    this.canvas = canvas\n  }\n\n  render () {\n    const dimensions = this.getDimensions()\n    const defaultStyle = {\n      width: dimensions.canvas.width,\n      height: dimensions.canvas.height,\n      cursor: this.state.drag ? 'grabbing' : 'grab'\n    }\n\n    const attributes = {\n      width: dimensions.canvas.width * pixelRatio,\n      height: dimensions.canvas.height * pixelRatio,\n      style: {\n        ...defaultStyle,\n        ...this.props.style\n      }\n    }\n\n    attributes[deviceEvents.react.down] = this.handleMouseDown\n    attributes[deviceEvents.react.drag] = this.handleDragOver\n    if (!this.props.disableDrop) { attributes[deviceEvents.react.drop] = this.handleDrop }\n    if (isTouchDevice) { attributes[deviceEvents.react.mouseDown] = this.handleMouseDown }\n\n    return <canvas ref={this.setCanvas} {...attributes} />\n  }\n}\n\nexport default AvatarEditor\n"],"names":["parseDOM","str","parser","DOMParser","parseFromString","retrieveImageURL","dataTransferItems","callback","i","length","item","type","getAsString","img","value","querySelector","src","isTouchDevice","window","navigator","msMaxTouchPoints","isFileAPISupported","File","draggableEvents","deviceEvents","touch","desktop","pixelRatio","devicePixelRatio","drawRoundedRect","context","x","y","width","height","borderRadius","rect","widthMinusRad","heightMinusRad","translate","arc","Math","PI","lineTo","drawDiamond","AvatarEditor","state","handleMouseDown","e","event","preventDefault","setState","handleMouseUp","_this","drag","props","onMouseUp","handleMouseMove","mousePositionX","targetTouches","pageX","clientX","mousePositionY","pageY","clientY","newState","rotate","mx","my","image","scale","getCroppingRect","lastX","lastY","toRadians","degree","cos","sin","position","getXScale","getYScale","onPositionChange","onMouseMove","handleDragOver","handleDrop","stopPropagation","dataTransfer","files","items","onDropFile","loadImageFile","loadImage","setCanvas","canvas","React","Component","this","border","Array","isArray","getBorders","borderX","borderY","canvasWidth","canvasHeight","isVertical","cropRect","resource","document","createElement","getContext","drawImage","getDimensions","paintImage","canvasAspect","imageAspect","min","croppingRect","xMin","xMax","yMin","yMax","max","match","loadImageURL","imageURL","imageObj","Image","onload","handleImageReady","bind","onerror","onLoadFailure","isDataURL","crossOrigin","imageFile","reader","FileReader","_this2","target","result","readAsDataURL","ReactDOM","findDOMNode","paint","nativeEvents","native","addEventListener","move","up","mouseMove","mouseUp","removeEventListener","prevProps","prevState","clearRect","onImageChange","imageState","getInitialSize","onImageReady","onLoadSuccess","newHeight","newWidth","dimensions","newProps","scaleFactor","calculatePosition","save","globalCompositeOperation","restore","fillStyle","color","slice","join","borderSizeX","borderSizeY","beginPath","fill","defaultStyle","attributes","style","react","down","disableDrop","drop","mouseDown","ref","propTypes","PropTypes","number","oneOfType","string","instanceOf","arrayOf","shape","object","oneOf","func","bool","defaultProps"],"mappings":"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"}